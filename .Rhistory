Lahman
Batting
library(tidyverse)
library(gapminder)
library(dbplyr)
library(gganimate)
aggregate(lifeExp ~ year + continent , data=gapminder, FUN=mean, na.rm=TRUE)
aggregate(gdpPercap ~ year + continent , data=gapminder, FUN=mean, na.rm=TRUE)
conti <- aggregate(lifeExp ~ year + continent , data=gapminder, FUN=mean, na.rm=TRUE)
conti <- aggregate(lifeExp ~ year + continent , data=gapminder, FUN=mean, na.rm=TRUE)
conti
a <- ggplot(data = gapminder, aes(conti,gdpPercap)) +
geom_point() +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
animate(a)
gapminder
gapminder <- mutate(gapminder, conti)
gapminder
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(colour=year,size=continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
Expgapminder
gapminder
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(colour=year,size=continent) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(colour=year,size=continent, alpha = 0.7, show.legend = TRUE) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(colour=year,size=continent, alpha = 0.7, show.legend = TRUE) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(colour=continent,t, alpha = 0.7, show.legend = TRUE) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(colour=gapminder$continent,t, alpha = 0.7, show.legend = TRUE) +
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
gapminder
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(colour=gapminder$continent, alpha = 0.7, show.legend = TRUE)+
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
animate(a)
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(aes(colour=continent), alpha = 0.7, show.legend = TRUE)+
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
animate(a)
a <- ggplot(data = gapminder, aes(gdpPercap,lifeExp)) +
geom_point(aes(colour=continent), alpha = 0.7, show.legend = TRUE)+
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
animate(a)
life <- aggregate(lifeExp ~ year + continent , data=gapminder, FUN=mean, na.rm=TRUE)
conti <- aggregate(gdpPercap ~ year + continent , data=gapminder, FUN=mean, na.rm=TRUE)
conti
conti
table <- mutate(life,GdpPercap = conti$gdpPercap)
table
life <- aggregate(lifeExp ~ year + continent , data=gapminder, FUN=mean, na.rm=TRUE)
conti <- aggregate(gdpPercap ~ year + continent , data=gapminder, FUN=mean, na.rm=TRUE)
table <- mutate(life,GdpPercap = conti$gdpPercap)
table
a <- ggplot(data = table, aes(gdpPercap,lifeExp)) +
geom_point(aes(colour=continent), alpha = 0.7, show.legend = TRUE)+
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
animate(a)
a <- ggplot(data = table, aes(GdpPercap,lifeExp)) +
geom_point(aes(colour=continent), alpha = 0.7, show.legend = TRUE)+
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'Life expectancy', y = 'GDP per capita')
animate(a)
a <- ggplot(data = table, aes(GdpPercap,lifeExp)) +
geom_point(aes(colour=continent), alpha = 0.7, show.legend = TRUE)+
transition_time(year) +
labs(title = 'Year: {frame_time}', y = 'Life expectancy', x = 'GDP per capita')
animate(a)
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
install.packages(c("boot", "class", "cli", "colorspace", "curl", "dbplyr", "DT", "evaluate", "fansi", "foreign", "fs", "httpuv", "MASS", "Matrix", "nlme", "parallelly", "purrr", "ragg", "Rcpp", "recipes", "rmarkdown", "spatial", "stringi", "survival", "timechange", "vctrs", "vroom"))
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
install.packages("compiler")
library(compiler)
?compiler
flights
library(tidyverse)
flights
library(tidyverse)
library(fivethirtyeight)
library(compiler)
flights
flight
?round
describe_contvar= function(x) {
ans= c(mean(x), sd(x), quantile(x, probs=c(0.25,0.75)))
names(ans)= c('mean','sd','p25','p75')
return(round(ans,1))
}
x <- rand(1:5)
x <- ran(1:5)
x <- c(1:10)
describe_contvar(x)
sum(...)
sum(3,...)
fobj= function(x) { exp(x) -2 }
fobj(c(1,2,3))
fobj(c(1))
?exp
fobj(c(22))
fobj(c(2))
exp(2)
length(X)
length(x)
x
names(x)
names(x) = "a"
x
names(x) = c("a","b")
x
mtcars
is.numeric(mtcars)
view(is.numeric)
view(mtcars)
is.double(mtcars)
fandango
mtcars
Vartype(mtcars)
type(mtcars)
class(mtcars)
class(mtcars$mpg)
cols(mtcars)
ncol(mtcars)
mtcars
for(i in 1:length(ncol)) {
return "s" + i
for(i in 1:length(ncol)) {
print(i)
}
for(i in 1:length(ncol(mtcars))) {
print(i)
}
for(i in length(ncol(mtcars))) {
print(i)
}
for(i in 1:11)) {
for(i in 1:11) {
print(i)
}
for(i in 1:ncol(mtcars)) {
print(i)
}
map_dbl(mtcars[,], mean)
map_dbl(mtcars[,], is.numeric)
x <- map_dbl(mtcars[,], is.numeric)
x
sum(x)
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
sum(ans)
if (ans = ncol(x)){
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
sum(ans)
if (ans = ncol(x)){
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
final <- sum(ans)
if (final = ncol(x)){
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
final <- sum(ans)
if (final == ncol(x)){
return TRUE
x
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
final <- sum(ans)
if (final == ncol(x)){
return TRUE
4 ==4
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
final <- sum(ans)
if (final == ncol(x)){
return TRUE
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
final <- sum(ans)
if (final = ncol(x)){
all_numeric = function(x){
ans <- map_dbl(x, is.numeric)
final <- sum(ans)
if (final = ncol(x)){
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
final <- sum(ans)
if (final = ncol(x){
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
final <- sum(ans)
if (final = ncol(x){
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
final <- sum(ans)
if (final = ncol(x){
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
a <- sum(ans)
if (a = ncol(x){
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
a <- sum(ans)
b <- ncol(x)
if (a = b{
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
a <- sum(ans)
b <- ncol(x)
if(a = b{
all_numeric = function(x){
ans <- map_dbl(x[,], is.numeric)
a <- sum(ans)
b <- ncol(x)
if (a = b){
all_numeric = function(x){
if (a = b){
x
ans <- map_dbl(mtcars[,], is.numeric)
a <- sum(ans)
b <- ncol(mtcars)
if (a = b){
if (a = b){
vector("list",3)
ans
ans = vector("list",3)
all_numeric = function(mtcars){
b <- map_dbl(mtcars[,], is.numeric)
a <- sum(ans)
b <- ncol(mtcars)
if (a=b){
all_numeric = function(x){
b <- map_dbl(x[,], is.numeric)
a <- sum(ans)
b <- ncol(x)
if (a=b){
answer = vector("list",3)
answer
answer[1]
vartypes = function(x){
answer = vector("list",3)
names(answer) = c("numeric", "factor","character")
answer[1] = map_dbl(x[,], is.numeric)
answer[2] = map_dbl(x[,], is.factor)
answer[3] = map_dbl(x[,], is.character)
}
function(mtcars)
vartypes = function(x){
answer = vector("list",3)
names(answer) = c("numeric", "factor","character")
answer[1] = map_dbl(x[,], is.numeric)
answer[2] = map_dbl(x[,], is.factor)
answer[3] = map_dbl(x[,], is.character)
return answer
vartypes = function(x){
answer = vector("list",3)
names(answer) = c("numeric", "factor","character")
answer[1] = map_dbl(x, is.numeric)
answer[2] = map_dbl(x, is.factor)
answer[3] = map_dbl(x, is.character)
return answer
vartypes = function(x){
answer = vector("list",3)
names(answer) = c("numeric", "factor","character")
answer[1] = map_dbl(x, is.numeric)
answer[2] = map_dbl(x, is.factor)
answer[3] = map_dbl(x, is.character)
return(answer)
}
vartypes(mtcars)
vartypes = function(x){
answer = vector("list",3)
names(answer) = c("numeric", "factor","character")
answer[1] = map_dbl(x[], is.numeric)
answer[2] = map_dbl(x[], is.factor)
answer[3] = map_dbl(x[], is.character)
return(answer)
}
vartypes(mtcars)
all_numeric = function(x){
b <- map_dbl(x[,], is.numeric)
a <- sum(ans)
b <- ncol(x)
if (a=b){
all_numeric = function(x){
c <- map_dbl(x[,], is.numeric)
a <- sum(ans)
b <- ncol(x)
if (a=b){
all_numeric = function(x){
c <- map_dbl(x[,], is.numeric)
a <- sum(c)
b <- ncol(x)
if (a=b){
all_numeric = function(x){
c <- map_dbl(x[,], is.numeric)
a <- sum(c)
b <- ncol(x)
if (a=b){
all_numeric = function(x){
c <- map_dbl(x[,], is.numeric)
a <- sum(c)
b <- ncol(x)
if (a=b){
answer[1] = map_dbl(mtcars[], is.numeric)
answer[1,] = map_dbl(mtcars[], is.numeric)
answer[,1] = map_dbl(mtcars[], is.numeric)
all_numeric = function(x){
c <- map_dbl(x[,], is.numeric)
a <- sum(c)
b <- ncol(x)
if (a=b){
all_numeric = function(x){
c <- map_dbl(x[,], is.numeric)
a <- sum(c)
b <- ncol(x)
if (a==b){
return TRUE
all_numeric = function(x){
c <- map_dbl(x[,], is.numeric)
a <- sum(c)
b <- ncol(x)
if (a==b){
return(TRUE)
}
else{
return(FALSE)
}
}
x(1,2,3,4,5)
x <- c(1,2,3,4,5)
x = 3
x <- c(1,2,3,4,5)
x ==3
c <- x==3
c
type(c)
class(c)
answer
answer[1]
answer[1] = c(1,2,3,4)
answer[1,] = c(1,2,3,4)
answer[,1] = c(1,2,3,4)
answer[1,1]
dim(answer)
answer
answer = vector("list",3)
answer
answer[1] <- c(1,2,3)
answer[1] <- (1,2,3)
answer[1] <- list(1,2,3)
answer[1] <- list(sample(1:3))
answer
answer[1] <- list(c(1:3))
answer
vartypes = function(x){
answer = vector("list",3)
names(answer) = c("numeric", "factor","character")
answer[1] = list(map_dbl(x[], is.numeric))
answer[2] = list(map_dbl(x[], is.factor))
answer[3] = list(map_dbl(x[], is.character))
return(answer)
}
vartypes(mtcars)
library(fandango)
library(fivethirtyeight)
data(fandango)
fandango
vartypes(fandango)
all_numeric(fandango)
all_numeric = function(x){
c <- map_dbl(x[,], is.numeric)
a <- sum(c)
b <- ncol(x)
if (a==b){
return(TRUE)
}
else{
return(FALSE)
}
}
all_numeric(fandango)
class(answer)
answer
library(tidyverse)
source("~/github/statcomp/code/routines.R")
library(tidyverse)
x= 1:5
x+2
install_tinytex()
install.packages("tinytex")
library(tinytex)
library(tidyverse)
x= 1:5
x+2
setwd("~/Desktop/RprojectBJ")
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv2("crimedata.csv")
df
df <- read_csv("crimedata.csv")
df <- read_csv("crimedata.csv")
library(tidyverse)
df <- read_csv("crimedata.csv")
head(df)
df <- select(df1, communityname, state, communityCode, ViolentCrimesPerPop, population, racepctblack, racePctWhite, racePctAsian, racePctHisp, agePct12t21, agePct12t29, agePct16t24, agePct65up, medIncome, PctPopUnderPov, PctNotHSGrad, PctUnemployed, TotalPctDiv, PctKidsBornNeverMar, RentMedian, PctForeignBorn )
df1 <- read_csv("crimedata.csv")
df1 <- read_csv("crimedata.csv")
df <- select(df1, communityname, state, communityCode, ViolentCrimesPerPop, population, racepctblack, racePctWhite, racePctAsian, racePctHisp, agePct12t21, agePct12t29, agePct16t24, agePct65up, medIncome, PctPopUnderPov, PctNotHSGrad, PctUnemployed, TotalPctDiv, PctKidsBornNeverMar, RentMedian, PctForeignBorn )
head(df1)
names(df1)
df <- select(df1, communityName, state, communityCode, ViolentCrimesPerPop, population, racepctblack, racePctWhite, racePctAsian, racePctHisp, agePct12t21, agePct12t29, agePct16t24, agePct65up, medIncome, PctPopUnderPov, PctNotHSGrad, PctUnemployed, TotalPctDiv, PctKidsBornNeverMar, RentMedian, PctForeignBorn )
df
names(df)
view(df)
x <- df$ViolentCrimesPerPop
x
x
x
x <- round(x,0)
x
df1
view(df1)
df <- select(df1, communityName, state, communityCode, ViolentCrimesPerPop, population, racepctblack, racePctWhite, racePctAsian, racePctHisp, agePct12t21, agePct12t29, agePct16t24, agePct65up, medIncome, PctPopUnderPov, PctNotHSGrad, PctUnemployed, TotalPctDiv, PctKidsBornNeverMar, RentMedian, PctForeignBorn )
x <- df$ViolentCrimesPerPop
xx <- ceiling(x)
xx
df$ViolentCrimesPerPop <- ceiling(df$ViolentCrimesPerPop)
view(Df)
view(df)
df1 <- read_csv("crimedata.csv")
df1$ViolentCrimesPerPop <- ceiling(df1$ViolentCrimesPerPop)
write.csv(df1, "crime.csv",)
view(df)
df <- read_csv("crime.csv")
df <- read_csv("crime.csv")
df <- read_csv("crime.csv")
df <- select(df, communityName, state, communityCode, ViolentCrimesPerPop, population, racepctblack, racePctWhite, racePctAsian, racePctHisp, agePct12t21, agePct12t29, agePct16t24, agePct65up, medIncome, PctPopUnderPov, PctNotHSGrad, PctUnemployed, TotalPctDiv, PctKidsBornNeverMar, RentMedian, PctForeignBorn )
view(Df)
view(df)
df <- select(df, communityName, state, ViolentCrimesPerPop, population, racepctblack, racePctWhite, racePctAsian, racePctHisp, agePct12t21, agePct12t29, agePct16t24, agePct65up, medIncome, PctPopUnderPov, PctNotHSGrad, PctUnemployed, TotalPctDiv, PctKidsBornNeverMar, RentMedian, PctForeignBorn )
view(df)
test <- df
test
names(df)
df_state <- df |> group_by(state) |> summarise(mean(racepctblack))
df_state
df_state <- df |> group_by(state) |> summarise( racepctblack = mean(df[,1:3]))
df_state
df_state <- df |> group_by(state) |> summarise( racepctblack = mean(df[,c(1:3)]))
df_state
df_state <- df |> group_by(state) |> summarise( mean(df[,c(1:3)]))
df_state
names(df)
df_state <- df |> group_by(state) |> summarise(ViolentCrimesPerPop = sum(ViolentCrimesPerPop), population = sum(population), racepctblack = mean(racepctblack), racePctWhite = mean(racePctWhite), racePctAsian = mean(racePctAsian), racePctHisp = mean(racePctHisp), agePct12t21 = mean(agePct12t21), agePct12t29 = mean(agePct12t29), agePct16t24 = mean(agePct16t24), agePct65up = mean(agePct65up), medIncome = mean(medIncome), PctPopUnderPov = mean(PctPopUnderPov), PctNotHSGrad = mean(PctNotHSGrad), PctUnemployed = mean(PctUnemployed), TotalPctDiv = mean(TotalPctDiv), PctKidsBornNeverMar = mean(PctKidsBornNeverMar), RentMedian = mean(RentMedian), PctForeignBorn = mean(PctForeignBorn))
df_state
view(df_state)
view(Df)
view(df)
a <- df_state
a
a
a
b <- round(a,0)
dim(a)
b
a[,2:19] <- round[,2:19]
is.numeric(a[,2:19])
is.numeric(a$racePctWhite)
b <- a %>%
mutate_if(is.numeric, round)
b
view(b)
b <- a %>%
mutate_if(is.numeric, round(,2))
b <- a %>%
mutate_if(is.numeric, round,digits=2)
b
view(b)
df_state_dec <- df |> group_by(state) |> summarise(ViolentCrimesPerPop = sum(ViolentCrimesPerPop), population = sum(population), racepctblack = mean(racepctblack), racePctWhite = mean(racePctWhite), racePctAsian = mean(racePctAsian), racePctHisp = mean(racePctHisp), agePct12t21 = mean(agePct12t21), agePct12t29 = mean(agePct12t29), agePct16t24 = mean(agePct16t24), agePct65up = mean(agePct65up), medIncome = mean(medIncome), PctPopUnderPov = mean(PctPopUnderPov), PctNotHSGrad = mean(PctNotHSGrad), PctUnemployed = mean(PctUnemployed), TotalPctDiv = mean(TotalPctDiv), PctKidsBornNeverMar = mean(PctKidsBornNeverMar), RentMedian = mean(RentMedian), PctForeignBorn = mean(PctForeignBorn))
df_state <- df_state %>%  mutate_if(is.numeric, round, digits=2)
view(df_state_dec)
df_state <- df_state %>%  mutate_if(is.numeric, round, digits=2)
view(df_state)
view(df)
df <- read_csv("crime.csv")
df_com <- select(df, communityName, state, ViolentCrimesPerPop, population, racepctblack, racePctWhite, racePctAsian, racePctHisp, agePct12t21, agePct12t29, agePct16t24, agePct65up, medIncome, PctPopUnderPov, PctNotHSGrad, PctUnemployed, TotalPctDiv, PctKidsBornNeverMar, RentMedian, PctForeignBorn )
df_state_dec <- df_com |> group_by(state) |> summarise(ViolentCrimesPerPop = sum(ViolentCrimesPerPop), population = sum(population), racepctblack = mean(racepctblack), racePctWhite = mean(racePctWhite), racePctAsian = mean(racePctAsian), racePctHisp = mean(racePctHisp), agePct12t21 = mean(agePct12t21), agePct12t29 = mean(agePct12t29), agePct16t24 = mean(agePct16t24), agePct65up = mean(agePct65up), medIncome = mean(medIncome), PctPopUnderPov = mean(PctPopUnderPov), PctNotHSGrad = mean(PctNotHSGrad), PctUnemployed = mean(PctUnemployed), TotalPctDiv = mean(TotalPctDiv), PctKidsBornNeverMar = mean(PctKidsBornNeverMar), RentMedian = mean(RentMedian), PctForeignBorn = mean(PctForeignBorn))
df_state <- df_state %>%  mutate_if(is.numeric, round, digits=2)
df_com
